# Target file name (without extension).
TARGET = WebServerPlugin

# OPDI platform specifier
PLATFORM = linux

# Relative path to the openhat application directory.
# All other paths are calculated relative to this path, so if you create a plugin anywhere it should be enough
# just to adjust this path.
APP_PATH = ../../openhatd

# Relative path to common directory (without trailing slash)
# This also becomes an additional include directory.
CPATH = $(APP_PATH)/../../../common

# Relative path to platform directory (without trailing slash)
# This also becomes an additional include directory.
PPATHBASE = $(APP_PATH)/../../../platforms
PPATH = $(PPATHBASE)/$(PLATFORM)

# List source files of the plugin here.
SRC = $(TARGET).cpp

# C++ wrapper
CPPPATH = $(CPATH)/cppwrapper

# C++ wrapper files
SRC += $(CPPPATH)/OPDI_Ports.cpp

# additional source files
# SRC += 
SRC += $(APP_PATH)/../../../platforms/linux/opdi_platformfuncs.c

# conio include path
CONIOINCPATH = $(APP_PATH)/../../../libraries/conio

# POCO include path
POCOINCPATH = $(APP_PATH)/../../../libraries/POCO/Util/include $(APP_PATH)/../../../libraries/POCO/Foundation/include $(APP_PATH)/../../../libraries/POCO/Net/include
POCOINCPATH += $(APP_PATH)/../../../libraries/POCO/JSON/include

# POCO library path
POCOLIBPATH = $(APP_PATH)/../../../libraries/POCO/lib/Linux/ARM

# POCO libraries
#POCOLIBS = -lPocoUtil -lPocoNet -lPocoFoundation 
POCOLIBS = $(POCOLIBPATH)/libPocoUtil.a $(POCOLIBPATH)/libPocoNet.a $(POCOLIBPATH)/libPocoFoundation.a $(POCOLIBPATH)/libPocoJSON.a

# Mongoose web server library
MONGOOSELIBPATH = $(APP_PATH)/../../../libraries/Mongoose/mongoose-master
SRC += $(MONGOOSELIBPATH)/mongoose.c

# Additional libraries
LIBS = -lpthread -lrt

# The compiler to be used.
CC = arm-linux-gnueabihf-g++

# List any extra directories to look for include files here.
# Each directory must be separated by a space.
EXTRAINCDIRS = $(CPATH) $(CPPPATH) $(PPATHBASE) $(PPATH) $(MONGOOSELIBPATH) $(POCOINCPATH) $(CONIOINCPATH) $(APP_PATH) $(GERTBOARDINCPATH) .

# Place -I options here
CINCS =

# Defines
CDEFINES = -Dlinux

# Compiler flags.
CFLAGS = -Wall -Wextra $(CDEFS) $(CINCS) -L $(POCOLIBPATH) $(CDEFINES)
CFLAGS += $(patsubst %,-I%,$(EXTRAINCDIRS)) -O2 -std=c++11 -static-libstdc++
CFLAGS += -Wl,-z,defs

OBJECTS = $(SRC)

all: $(SRC) $(TARGET)

$(TARGET): $(OBJECTS)
	$(CC) $(CFLAGS) $(OBJECTS) -shared -fPIC -o $@.so $(POCOLIBS) $(LIBS)

.cpp.o:
	@echo
	@echo Compiling: $<
	$(CC) -c $(CFLAGS) $< -o $@

.c.o:
	$(CC) -c $(CFLAGS) $< -o $@

clean:
	rm -f $(PPATH)/*.o
	rm -f $(CPATH)/*.o
	rm -f $(MPATH)/*.o
	rm $(TARGET)

